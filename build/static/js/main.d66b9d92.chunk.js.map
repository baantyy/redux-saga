{"version":3,"sources":["redux/constants.js","redux/actions.js","redux/api.js","redux/sagas.js","redux/imageReducer.js","redux/statReducer.js","redux/reducer.js","redux/store.js","Pages/Splash.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_IMAGES","LOAD_SUCCESS","loadImages","type","setImages","payload","setError","loadStats","setStats","setStatsError","key","url","fetchImages","page","axios","get","then","res","data","catch","err","fetchStats","id","handlImagesLoad","imagesSaga","handleStatsLoad","statsSaga","rootSaga","getPage","state","image","select","call","images","put","toString","takeEvery","i","take","length","fork","all","initialState","isLoading","error","imageReducer","statReducer","downloads","total","reducer","combineReducers","stat","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","subscribe","console","log","getState","Stats","props","className","Splash","dispatch","useEffect","map","Math","ceil","height","width","src","urls","small","alt","user","username","onClick","disabled","connect","Boolean","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d66b9d92.chunk.js","sourcesContent":["export const LOAD_IMAGES = 'LOAD_IMAGES';\nexport const LOAD_SUCCESS = 'LOAD_SUCCESS';\nexport const LOAD_FAIL = 'LOAD_FAIL';\n\nexport const LOAD_STATS = 'LOAD_STATS';\nexport const LOAD_STATS_SUCCESS = 'LOAD_STATS_SUCCESS';\nexport const LOAD_STATS_FAIL = 'LOAD_STATS_FAIL';","import { \n    LOAD_FAIL, LOAD_IMAGES, LOAD_SUCCESS, LOAD_STATS, LOAD_STATS_SUCCESS, LOAD_STATS_FAIL \n} from \"./constants\";\n\nexport const loadImages = () => {\n    return { \n        type: LOAD_IMAGES\n    };\n};\n\nexport const setImages = payload => {\n    return { \n        type: LOAD_SUCCESS, \n        payload\n    };\n};\n\nexport const setError = payload => {\n    return { \n        type: LOAD_FAIL, \n        payload\n    };\n};\n\nexport const loadStats = payload => {\n    return { \n        type: LOAD_STATS,\n        payload\n    };\n};\n\nexport const setStats = payload => {\n    return { \n        type: LOAD_STATS_SUCCESS, \n        payload\n    };\n};\n\nexport const setStatsError = payload => {\n    return { \n        type: LOAD_STATS_FAIL, \n        payload\n    };\n};\n","import axios from 'axios';\n\nconst key = `?client_id=5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02`;\nconst url = `https://api.unsplash.com/photos/`;\n\nexport const fetchImages = page => {\n    return axios.get(`${url}${key}&per_page=6&page=${page}`)\n        .then(res => {\n            return res.data;\n        })\n        .catch(err => {\n            return err;\n        })\n}\n\nexport const fetchStats = id => {\n    return axios.get(`${url}/${id}/statistics${key}`)\n        .then(res => {\n            return res.data;\n        })\n        .catch(err => {\n            return err;\n        })\n}","import { put, takeLatest, delay, takeEvery, take, call, select, all, fork } from 'redux-saga/effects';\nimport { loadImages, setImages, setError, loadStats, setStats, setStatsError } from './actions';\nimport { LOAD_FAIL, LOAD_SUCCESS, LOAD_IMAGES } from './constants';\nimport { fetchImages, fetchStats } from './api';\n\n// watcher saga -> actions -> worker saga\n\n// images\nconst getPage = state => state.image.page;\nfunction* handlImagesLoad(){\n    try {\n        const page = yield select(getPage);\n        const images = yield call(fetchImages, page);\n        yield put(setImages(images));\n    } catch (err) {\n        yield put(setError(err.toString()));\n    }\n};\n\nfunction* imagesSaga(){\n    yield takeEvery(LOAD_IMAGES, handlImagesLoad);\n};\n\nfunction* handleStatsLoad(id){\n    for(let i = 0; i < 3; i++){\n        try {\n            yield put(loadStats(id));\n            const res = yield call(fetchStats, id);\n            yield put(setStats(res));\n            return true;\n        } catch (err) { }\n    }\n    yield put(setStatsError(id));\n};\n\nfunction* statsSaga(){\n    while(true){\n        const { payload } = yield take(LOAD_SUCCESS);\n        for(let i = 0; i < payload.length; i++){\n            yield fork(handleStatsLoad, payload[i].id);\n        }\n    }\n}\n\nexport default function* rootSaga(){\n    yield all([\n        imagesSaga(),\n        statsSaga(),\n    ]);\n};","import { LOAD_FAIL, LOAD_IMAGES, LOAD_SUCCESS } from \"./constants\";\n\nconst initialState = {\n    images: [],\n    isLoading: false,\n    error: null,\n    page: 1,\n};\n\nconst imageReducer = (state = initialState, {type, payload}) => {\n    switch(type) {\n        case LOAD_IMAGES: \n            return { ...state, ...{ isLoading: true }};\n        case LOAD_SUCCESS: \n            const page = state.page + 1;\n            const images = [...state.images, ...payload];\n            return { ...state, ...{ images, isLoading: false, error: null, page }};\n        case LOAD_FAIL: \n            return { ...state, ...{ isLoading: false, error: payload }};\n        default: \n            return state;\n    };\n};\n\nexport default imageReducer;","import { LOAD_STATS, LOAD_STATS_FAIL, LOAD_STATS_SUCCESS } from \"./constants\";\n\nconst initialState = {};\n\nconst statReducer = (state = initialState, {type, payload}) => {\n    switch(type) {\n        case LOAD_STATS: \n            return {\n                ...state,\n                [payload]: {\n                    isLoading: true,\n                    downloads: null,\n                    error: false,\n                }\n            };\n        case LOAD_STATS_SUCCESS:\n            return {\n                ...state,\n                [payload.id]: {\n                    isLoading: false,\n                    downloads: payload.downloads.total,\n                    error: false,\n                }\n            };\n        case LOAD_STATS_FAIL:\n            return {\n                ...state,\n                [payload]: {\n                    isLoading: false,\n                    downloads: null,\n                    error: true\n                }\n            };\n        default: \n            return state;\n    };\n};\n\nexport default statReducer;","import { combineReducers } from 'redux';\nimport imageReducer from './imageReducer';\nimport statReducer from './statReducer';\n\nconst reducer = combineReducers({\n    image: imageReducer,\n    stat: statReducer,\n});\n\nexport default reducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootSaga from './sagas';\nimport reducer from './reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducer,\n  compose(\n    applyMiddleware(sagaMiddleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\nsagaMiddleware.run(rootSaga);\n\nstore.subscribe(() => {\n  console.log(store.getState());\n})\n\nexport default store;","import React, { useEffect, Fragment } from 'react';\nimport './Splash.css';\nimport { loadImages } from '../redux/actions';\n\nconst Splash = props => {\n  const { image: { images, isLoading, error }, stat, dispatch } = props;\n  useEffect(() => {\n      dispatch(loadImages());\n  },[dispatch]);\n  return (\n    <div>\n      <header>What the Splash!</header>\n      <div className=\"content\">\n            <section className=\"grid\">\n                {images.map(image => (\n                    <div\n                        key={image.id}\n                        className={`item item-${Math.ceil(\n                            image.height / image.width,\n                        )}`}\n                    >\n                        <Stats stat={stat[image.id] || null} />\n                        <img\n                            src={image.urls.small}\n                            alt={image.user.username}\n                        />\n                    </div>\n                ))}\n            </section>\n            <button className=\"btn\" \n                    onClick={() => { !isLoading && dispatch(loadImages()) }}\n                    disabled={isLoading}\n                >\n                {isLoading ? 'Loading...' : 'Load Images'}\n            </button>\n            {error && <p className=\"err\">Something went wrong...</p>}\n        </div>\n    </div>\n  );\n};\n\nconst Stats = props => {\n    const { stat } = props;\n    return (\n        <Fragment>\n            {stat ? \n                <Fragment>\n                    {stat.error ? <span className=\"stats\">🤯 Error!</span> : ''}\n                    {stat.isLoading ? <span className=\"stats\">🙄 Loading...</span> : ''}\n                    {stat.downloads ? <span className=\"stats\">🤘 {stat.downloads}</span> : ''}\n                </Fragment> : ''\n            }\n        </Fragment>\n    );\n};\n\nexport default Splash;\n","import React from 'react';\nimport { connect } from 'react-redux';\n// import Button from './Pages/Button';\nimport Splash from './Pages/Splash';\n\nconst App = props => {\n  return (\n    <div className=\"app\">\n      <Splash {...props} />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return state;\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\n\nimport store from './redux/store';\nimport { Provider } from 'react-redux'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}